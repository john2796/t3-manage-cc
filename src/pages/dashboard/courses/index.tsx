import AdminDashboardLayout from "@/components/layouts/admin-dashboard-layout";
import { api } from "@/utils/api";
import { getImageUrl } from "@/utils/getImageUrl";
import {
  Badge,
  Button,
  FileInput,
  Flex,
  Grid,
  Group,
  Image,
  Card as MantineCard,
  Modal,
  Stack,
  Text,
  TextInput,
  Textarea,
} from "@mantine/core";
import { useForm } from "@mantine/form";
import { useDisclosure } from "@mantine/hooks";
import { type Course, type Section } from "@prisma/client";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { uploadFileToS3 } from "./[courseId]";

type TCourseCard = {
  course: Course & {
    sections: Section;
  };
  handleDeleteCourse: () => any;
};

const Courses: NextPage = () => {
  const courses = api.course.getCourses.useQuery();
  const createCourseMutation = api.course.createCourse.useMutation();
  const deleteCourseMutation = api.course.deleteCourse.useMutation();
  const createPresignedUrlMutation =
    api.course.createPresignedUrl.useMutation();

  const [
    isCreateCourseModalOpen,
    { open: openCreateCourseModal, close: closeCreateCourseModal },
  ] = useDisclosure(false);

  const createCourseForm = useForm({
    initialValues: {
      title: "",
      description: "",
      file: "",
    },
  });

  const handleDeleteCourse = async (id: string) => {
    if (!confirm("are you sure you want to delete this course")) return;
    await deleteCourseMutation.mutateAsync({
      courseId: id,
    });
    await courses.refetch();
  };

  const handleSubmitCourse = async (values: {
    title: string;
    description: string;
    file: File;
  }) => {
    const course = await createCourseMutation.mutateAsync(values);
    if (values?.file) {
      await uploadFileToS3({
        getPresignedUrl: () =>
          createPresignedUrlMutation.mutateAsync({
            courseId: course.id,
          }),
        file: values.file,
      });
    }
    closeCreateCourseModal();
    createCourseForm.reset();
    await courses.refetch();
  };

  return (
    <>
      <Head>
        <title>Manage Courses</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Modal
        opened={isCreateCourseModalOpen}
        onClose={closeCreateCourseModal}
        title="Create Course"
      >
        <form onSubmit={createCourseForm.onSubmit(handleSubmitCourse)}>
          <Stack>
            <TextInput
              withAsterisk
              label="Title"
              required
              placeholder="name your course here"
              {...createCourseForm.getInputProps("title")}
            />

            <Textarea
              withAsterisk
              minRows={6}
              required
              label="Description"
              placeholder="describe your course a bit"
              {...createCourseForm.getInputProps("description")}
            />

            <FileInput
              withAsterisk
              accept="image/jpeg,image/png"
              required
              label="Course Image"
              placeholder="Add your course thumbnail here"
              {...createCourseForm.getInputProps("file")}
            />
          </Stack>

          <Group position="right" mt="md">
            <Button type="submit">Create Course</Button>
          </Group>
        </form>
      </Modal>

      <main>
        <AdminDashboardLayout>
          <Flex justify="space-between" align="center" direction="row">
            <h1>Manage Courses</h1>

            <Button onClick={openCreateCourseModal}>Create Course</Button>
          </Flex>

          <Grid>
            {courses.data?.map((course) => (
              <Grid.Col key={course.id} span={4}>
                <CourseCard
                  course={course}
                  handleDeleteCourse={() => handleDeleteCourse(course.id)}
                />
              </Grid.Col>
            ))}
          </Grid>
        </AdminDashboardLayout>
      </main>
    </>
  );
};

export function CourseCard({ course, handleDeleteCourse }: TCourseCard) {
  return (
    <MantineCard shadow="sm" padding="lg" radius="md" withBorder>
      <MantineCard.Section>
        <Image src={getImageUrl(course.imageId)} height={160} alt="Norway" />
      </MantineCard.Section>

      <Group position="apart" mt="md" mb="xs">
        <Text weight={500}>{course.title}</Text>
        <Badge color="pink" variant="light">
          On Sale
        </Badge>
      </Group>

      <Text size="sm" color="dimmed">
        {course.description}
      </Text>
      <Text size="sm" color="dimmed">
        section count: {course?.sections.length}
      </Text>

      <Button
        component={Link}
        href={`/dashboard/courses/${course.id}`}
        variant="light"
        color="blue"
        fullWidth
        mt="md"
        radius="md"
      >
        Manage
      </Button>
      <Button
        variant="light"
        color="red"
        fullWidth
        mt="md"
        radius="md"
        onClick={handleDeleteCourse}
      >
        Delete
      </Button>
    </MantineCard>
  );
}

export default Courses;
